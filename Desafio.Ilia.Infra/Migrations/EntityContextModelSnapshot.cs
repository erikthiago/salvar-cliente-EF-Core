// <auto-generated />
using System;
using Desafio.Ilia.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Desafio.Ilia.Infra.Migrations
{
    [DbContext(typeof(EntityContext))]
    partial class EntityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Desafio.Ilia.Domain.Entitities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("EndCidade")
                        .HasColumnType("varchar(max)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("EndPais")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnName("EndNumero")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("EndEstado")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Steet")
                        .IsRequired()
                        .HasColumnName("EndRua")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("DataHoraAlteracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnName("EndCEP")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("EndEndereco");
                });

            modelBuilder.Entity("Desafio.Ilia.Domain.Entitities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("CliEmail")
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("CliNome")
                        .HasColumnType("varchar(max)");

                    b.Property<Guid?>("PrincipalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("DataHoraAlteracao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalId");

                    b.ToTable("CliCliente");
                });

            modelBuilder.Entity("Desafio.Ilia.Domain.Entitities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnName("DataHoraCriacao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnName("TelNumero")
                        .HasColumnType("varchar(10)");

                    b.Property<int>("PhoneType")
                        .HasColumnName("TelTipoTelefone")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnName("DataHoraAlteracao")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("TelTelefone");
                });

            modelBuilder.Entity("Desafio.Ilia.Domain.Entitities.Address", b =>
                {
                    b.HasOne("Desafio.Ilia.Domain.Entitities.Client", "Client")
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Desafio.Ilia.Domain.Entitities.Client", b =>
                {
                    b.HasOne("Desafio.Ilia.Domain.Entitities.Client", "Principal")
                        .WithMany("ClientsLiveTogether")
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Desafio.Ilia.Domain.Entitities.Phone", b =>
                {
                    b.HasOne("Desafio.Ilia.Domain.Entitities.Client", "Client")
                        .WithMany("Phones")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
